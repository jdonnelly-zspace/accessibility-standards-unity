#!/usr/bin/env node

/**
 * PDF Export Script for Accessibility Audit Reports
 *
 * Exports VPAT and audit reports to professional PDF format
 * Uses Puppeteer to render markdown as HTML, then export to PDF
 *
 * Usage:
 *   node bin/export-pdf.js <markdown-file> [options]
 *   node bin/export-pdf.js AccessibilityAudit/VPAT-COMPREHENSIVE.md --output vpat.pdf
 *
 * Options:
 *   --output <path>       Output PDF path (default: input name with .pdf)
 *   --config <path>       Export configuration file (default: config/export-config.json)
 *   --format <size>       Page size: A4, Letter, Legal (default: Letter)
 *   --landscape           Use landscape orientation
 *   --header <text>       Custom header text
 *   --footer <text>       Custom footer text
 *   --no-toc              Disable table of contents
 *   --css <path>          Custom CSS file for styling
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import puppeteer from 'puppeteer';
import { marked } from 'marked';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Parse command line arguments
function parseArgs() {
    const args = process.argv.slice(2);
    const options = {
        input: null,
        output: null,
        config: path.join(__dirname, '..', 'config', 'export-config.json'),
        format: 'Letter',
        landscape: false,
        header: null,
        footer: null,
        includeTOC: true,
        customCSS: null
    };

    for (let i = 0; i < args.length; i++) {
        const arg = args[i];
        switch (arg) {
            case '--output':
                options.output = args[++i];
                break;
            case '--config':
                options.config = args[++i];
                break;
            case '--format':
                options.format = args[++i];
                break;
            case '--landscape':
                options.landscape = true;
                break;
            case '--header':
                options.header = args[++i];
                break;
            case '--footer':
                options.footer = args[++i];
                break;
            case '--no-toc':
                options.includeTOC = false;
                break;
            case '--css':
                options.customCSS = args[++i];
                break;
            default:
                if (!arg.startsWith('--') && !options.input) {
                    options.input = arg;
                }
        }
    }

    return options;
}

// Load export configuration
function loadConfig(configPath) {
    try {
        if (fs.existsSync(configPath)) {
            const configData = fs.readFileSync(configPath, 'utf-8');
            return JSON.parse(configData);
        }
    } catch (error) {
        console.warn(`Warning: Could not load config from ${configPath}: ${error.message}`);
    }

    // Default configuration
    return {
        pdf: {
            companyName: 'Your Organization',
            logo: null,
            footerText: 'Accessibility Audit Report - Generated by accessibility-standards-unity'
        }
    };
}

// Generate Table of Contents from markdown headers
function generateTOC(markdown) {
    const lines = markdown.split('\n');
    const toc = [];
    const headerRegex = /^(#{1,6})\s+(.+)$/;

    for (const line of lines) {
        const match = line.match(headerRegex);
        if (match) {
            const level = match[1].length;
            const title = match[2].replace(/\*/g, ''); // Remove markdown formatting
            const id = title.toLowerCase()
                .replace(/[^\w\s-]/g, '')
                .replace(/\s+/g, '-');

            toc.push({
                level,
                title,
                id
            });
        }
    }

    // Generate TOC HTML
    let tocHTML = '<div class="toc"><h2>Table of Contents</h2><ul>';
    for (const item of toc) {
        const indent = '  '.repeat(item.level - 1);
        tocHTML += `${indent}<li><a href="#${item.id}">${item.title}</a></li>\n`;
    }
    tocHTML += '</ul></div>';

    return tocHTML;
}

// Add IDs to headers in HTML for TOC linking
function addHeaderIDs(html) {
    return html.replace(/<h([1-6])>(.+?)<\/h\1>/g, (match, level, content) => {
        const text = content.replace(/<[^>]*>/g, ''); // Strip HTML tags
        const id = text.toLowerCase()
            .replace(/[^\w\s-]/g, '')
            .replace(/\s+/g, '-');
        return `<h${level} id="${id}">${content}</h${level}>`;
    });
}

// Get default CSS styling for PDF
function getDefaultCSS(config) {
    return `
        @page {
            margin: 0.75in;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            font-size: 11pt;
            line-height: 1.6;
            color: #333;
            max-width: 100%;
        }

        .header {
            text-align: center;
            margin-bottom: 2em;
            padding-bottom: 1em;
            border-bottom: 2px solid #0066cc;
        }

        .header h1 {
            color: #0066cc;
            margin: 0;
            font-size: 24pt;
        }

        .header .company {
            font-size: 14pt;
            color: #666;
            margin-top: 0.5em;
        }

        .toc {
            page-break-after: always;
            margin: 2em 0;
        }

        .toc h2 {
            color: #0066cc;
            border-bottom: 2px solid #0066cc;
            padding-bottom: 0.5em;
        }

        .toc ul {
            list-style-type: none;
            padding-left: 0;
        }

        .toc li {
            margin: 0.5em 0;
        }

        .toc a {
            color: #0066cc;
            text-decoration: none;
        }

        .toc a:hover {
            text-decoration: underline;
        }

        h1, h2, h3, h4, h5, h6 {
            color: #0066cc;
            margin-top: 1.5em;
            margin-bottom: 0.5em;
        }

        h1 {
            font-size: 20pt;
            border-bottom: 2px solid #0066cc;
            padding-bottom: 0.3em;
        }

        h2 {
            font-size: 16pt;
            border-bottom: 1px solid #ccc;
            padding-bottom: 0.2em;
        }

        h3 {
            font-size: 14pt;
        }

        h4, h5, h6 {
            font-size: 12pt;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin: 1em 0;
            font-size: 10pt;
        }

        th {
            background-color: #0066cc;
            color: white;
            padding: 0.5em;
            text-align: left;
            font-weight: bold;
        }

        td {
            border: 1px solid #ddd;
            padding: 0.5em;
            vertical-align: top;
        }

        tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        code {
            background-color: #f4f4f4;
            padding: 0.2em 0.4em;
            border-radius: 3px;
            font-family: 'Courier New', monospace;
            font-size: 10pt;
        }

        pre {
            background-color: #f4f4f4;
            padding: 1em;
            border-radius: 5px;
            overflow-x: auto;
            font-size: 9pt;
        }

        pre code {
            background-color: transparent;
            padding: 0;
        }

        blockquote {
            border-left: 4px solid #0066cc;
            padding-left: 1em;
            margin-left: 0;
            color: #666;
            font-style: italic;
        }

        ul, ol {
            margin: 0.5em 0;
            padding-left: 2em;
        }

        li {
            margin: 0.3em 0;
        }

        a {
            color: #0066cc;
            text-decoration: none;
        }

        a:hover {
            text-decoration: underline;
        }

        .page-break {
            page-break-after: always;
        }

        img {
            max-width: 100%;
            height: auto;
            display: block;
            margin: 1em auto;
        }

        .footer {
            margin-top: 2em;
            padding-top: 1em;
            border-top: 1px solid #ccc;
            font-size: 9pt;
            color: #666;
            text-align: center;
        }
    `;
}

// Convert markdown file to PDF
async function convertToPDF(options) {
    console.log('Starting PDF export...');

    // Load configuration
    const config = loadConfig(options.config);

    // Read markdown file
    if (!fs.existsSync(options.input)) {
        throw new Error(`Input file not found: ${options.input}`);
    }

    const markdownContent = fs.readFileSync(options.input, 'utf-8');
    console.log(`Loaded markdown file: ${options.input}`);

    // Convert markdown to HTML
    let htmlContent = marked.parse(markdownContent);
    htmlContent = addHeaderIDs(htmlContent);

    // Generate TOC if enabled
    let tocHTML = '';
    if (options.includeTOC) {
        tocHTML = generateTOC(markdownContent);
    }

    // Load custom CSS or use default
    let css = getDefaultCSS(config);
    if (options.customCSS && fs.existsSync(options.customCSS)) {
        css = fs.readFileSync(options.customCSS, 'utf-8');
    }

    // Build header
    const companyName = config.pdf?.companyName || 'Your Organization';
    const fileName = path.basename(options.input, '.md');
    const headerHTML = `
        <div class="header">
            <h1>${fileName.replace(/-/g, ' ')}</h1>
            <div class="company">${companyName}</div>
            <div class="date">Generated: ${new Date().toLocaleDateString()}</div>
        </div>
    `;

    // Build footer
    const footerText = options.footer || config.pdf?.footerText ||
                      'Generated by accessibility-standards-unity';
    const footerHTML = `
        <div class="footer">
            ${footerText}
        </div>
    `;

    // Complete HTML document
    const fullHTML = `
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>${fileName}</title>
            <style>${css}</style>
        </head>
        <body>
            ${headerHTML}
            ${tocHTML}
            ${htmlContent}
            ${footerHTML}
        </body>
        </html>
    `;

    // Determine output path
    if (!options.output) {
        options.output = options.input.replace(/\.md$/, '.pdf');
    }

    // Ensure output directory exists
    const outputDir = path.dirname(options.output);
    if (!fs.existsSync(outputDir)) {
        fs.mkdirSync(outputDir, { recursive: true });
    }

    // Launch Puppeteer and generate PDF
    console.log('Launching browser...');
    const browser = await puppeteer.launch({
        headless: true,
        args: ['--no-sandbox', '--disable-setuid-sandbox']
    });

    try {
        const page = await browser.newPage();

        // Set content
        await page.setContent(fullHTML, {
            waitUntil: 'networkidle0'
        });

        // PDF options
        const pdfOptions = {
            path: options.output,
            format: options.format,
            landscape: options.landscape,
            printBackground: true,
            margin: {
                top: '0.75in',
                right: '0.75in',
                bottom: '0.75in',
                left: '0.75in'
            },
            displayHeaderFooter: true,
            headerTemplate: options.header ? `
                <div style="font-size: 10px; text-align: center; width: 100%;">
                    ${options.header}
                </div>
            ` : '<div></div>',
            footerTemplate: `
                <div style="font-size: 10px; text-align: center; width: 100%; color: #666;">
                    <span style="margin-right: 10px;">Page <span class="pageNumber"></span> of <span class="totalPages"></span></span>
                </div>
            `
        };

        console.log('Generating PDF...');
        await page.pdf(pdfOptions);

        console.log(`✓ PDF exported successfully: ${options.output}`);

        // Get file size
        const stats = fs.statSync(options.output);
        const fileSizeKB = (stats.size / 1024).toFixed(2);
        console.log(`  File size: ${fileSizeKB} KB`);

    } finally {
        await browser.close();
    }
}

// Main execution
async function main() {
    const options = parseArgs();

    if (!options.input) {
        console.error('Error: No input file specified');
        console.error('');
        console.error('Usage: node bin/export-pdf.js <markdown-file> [options]');
        console.error('');
        console.error('Options:');
        console.error('  --output <path>       Output PDF path');
        console.error('  --config <path>       Export configuration file');
        console.error('  --format <size>       Page size: A4, Letter, Legal');
        console.error('  --landscape           Use landscape orientation');
        console.error('  --header <text>       Custom header text');
        console.error('  --footer <text>       Custom footer text');
        console.error('  --no-toc              Disable table of contents');
        console.error('  --css <path>          Custom CSS file');
        process.exit(1);
    }

    try {
        await convertToPDF(options);
    } catch (error) {
        console.error(`Error: ${error.message}`);
        process.exit(1);
    }
}

main();
